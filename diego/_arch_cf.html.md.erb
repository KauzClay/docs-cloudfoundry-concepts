This topic includes the following sections:

* [Introduction to Diego](#overview)
* [Diego Flow and Architecture Diagram](#diagram)
* [Diego Component Glossary](#glossary)

##<a id="overview"></a> Introduction to Diego

Diego is a self-healing container management system that attempts to keep the correct number of instances running in Diego Cells to avoid network failures and crashes. Diego schedules and runs Tasks and Long-Running Processes (LRP). For more about Tasks and LRPs, see [How the Diego Auction Allocates Jobs](diego-auction.html).

You can submit, update, and retrieve the desired number of Tasks and LRPs using the [Bulletin Board System (BBS) API](https://github.com/cloudfoundry/bbs).



##<a id='diagram'></a> Diego Flow and Architecture Diagram


When you push an app to Cloud Foundry using Diego, Cloud Foundry performs the following process:

 1. The Cloud Controller sends a request to the BBS API.
 1. The BBS contacts the Auctioneer to create an Auction based on the desired resources for that LRP. The Rep accepts the Auction request.
 1. The Rep creates a Garden container and executes the work encoded in the Tasks and LRPs. This work is encoded as a generic, platform-independent recipe of composable actions.
 1. The Converger periodically analyzes snapshots of the desired state of the system and corrects discrepancies, ensuring that Diego is eventually consistent.
 1. Diego sends real-time streaming logs for Tasks and LRPs to the [Loggregator](https://github.com/cloudfoundry/loggregator) system. Diego also registers its running LRP instances with the [Gorouter](https://github.com/cloudfoundry/gorouter) to route external web traffic to them.

<% if vars.product_name == 'CF' %>
<a target="_blank" href="../images/diego/diego-flow.png"><%= image_tag("../images/diego/diego-flow.png") %></a>
Click the image for a larger representation.
<% else %>
<%= image_tag("../images/diego/diego-flow-other.png") %>
<% end %>



##<a id='glossary'></a>Diego Component Glossary##

The following summarizes the roles and responsibilities of various components depicted in the Diego architecture diagram above.

* [Diego Cell Components](#cell-components)
* [Diego Brain Components](#brain-components)
* [Database VMs](#database-vms)
* [Access VMs](#access-vms)
* [Cloud Controller Bridge Components](#bridge-components)
* [App Lifecycle Binaries](#app-lifecycle)

###<a id='cell-components'></a>Diego Cell Components ###

Diego Cell directly manages and maintains Tasks and LRPs with the following components:

 * <a id='rep'></a>**Rep** <br>
	* Maintains a presence record for the Cell in the Locket
	* Participates in auctions to accept new Tasks and LRP instances
	* Runs Tasks and LRPs by creating a container and then running actions in it
	* Reacts to container events
	* Periodically ensures its set of Tasks and ActualLRPs in the BBS is in sync with the containers actually present on the Cell
 	* Manages container allocations against resource constraints on the Cell, such as memory and disk space
	* Streams stdout and stderr from container processes to the metron-agent running on the Cell, which in turn forwards to the Loggregator system
	* Periodically collects container metrics and emits them to Loggregator

 * <a id="garden"></a> **Garden** <br>
	* Provides a platform-independent server and client to manage [Garden](architecture/garden.html) containers
	* Defines the API for creating and managing containers

 * <a id='metron-agent'></a> **Metron Agent** <br>
 	* Forwards app logs, errors, and app and Diego metrics to the [Loggregator](https://github.com/cloudfoundry/loggregator) Doppler component.

 * <a id="route-emitter"></a> **Route-Emitter**
	* Monitors DesiredLRP and ActualLRP states.
	* Periodically emits route registration and unregistration messages for instances running on the local cell.

###<a id='brain-components'></a> Diego Brain

Diego Brain distribute Tasks and LRPs to Diego Cells and corrects discrepancies between Actual and Desired counts to ensure fault-tolerance and long-term consistency. The Diego Brain consists of the Auctioneer.

* <a id='auctioneer'></a> **Auctioneer** <br>
	* Holds auctions for Tasks and LRP instances
	* Distributes work using the auction algorithm. Auction communication is sent between the Auctioneer and the Cell Reps over HTTPS. For more information about the auction algorithm, see [How the Diego Auction Allocates Jobs](diego-auction.html).
	* Maintains a lock in Locket to ensure only one auctioneer handles auctions at a time

###<a id='database-vms'></a>Database VMs ###

 * <a id='bbs'></a>**BBS** <br>
  * Maintains a real-time representation of the state of the Diego cluster, including all desired LRPs, running LRP instances, and in-flight Tasks
  * Maintains a lock in Locket to ensure that only one BBS is active
  * Periodically compares DesiredLRPs and ActualLRPs and takes action to enforce the desired state
  * Resends auction requests for Tasks that have been pending for too long and completion callbacks for Tasks that have remained completed for too long

 * <a id='mysql'></a>**MySQL** <br>
  * MySQL provides a consistent key-value data store to Diego

###<a id='access-vms'></a>Access VMs

 * <a id='file-server'></a>**File Server** <br>
 	* Serves static assets used in the app lifecycle

 * <a id='ssh-proxy'></a>**SSH Proxy** <br>
	* Brokers connections between SSH clients and SSH servers
	* Runs inside instance containers and authorizes access to app instances based on Cloud Controller roles

##<a id='bridge-components'></a>Cloud Controller Bridge Components

The Cloud Controller Bridge (CC-Bridge) components translate app-specific requests from the Cloud Controller to the BBS. These components include the following:

* <a id='stager'></a> **Stager**
 * Translates staging requests from the Cloud Controller into generic Tasks and LRPs
 * Sends a response to the Cloud Controller when a Task completes

* <a id='cc-uploader'></a>**CC-Uploader**
 * Mediates uploads from the Rep to the Cloud Controller
 * Translates simple HTTP POST requests from the Rep into complex multipart-form uploads for the Cloud Controller


* <a id='nsync'></a>**Nsync Bulker**
 * Periodically polls the Cloud Controller for each app to ensure that Diego maintains accurate DesiredLRPs counts

* **Nsync Listener**
 * Listens for app requests
 * Updates and creates the DesiredLRPs count and updates DesiredLRPs through the BBS


* <a id='tps'></a> **TPS Listener**
 * Provides the Cloud Controller with information about currently running LRPs to respond to `cf apps` and `cf app APP_NAME` requests

* **TPS Watcher**
 * Monitors ActualLRP activity for crashes and reports them the Cloud Controller


### <a id='service-registration'></a>Service Registration and Component Coordination
#### <a id="locket"></a> **Locket** <br>
	* Provides abstractions for locks and service registration
	* Relies on a SQL backend for persistence
	* Lives in the Database VM

###<a id="app-lifecycle"></a>App Lifecycle Binaries

The following three platform-specific binaries deploy apps and govern their lifecycle:

* **The Builder**, which stages an app. The [CC-Bridge](#bridge-components) runs the Builder as a Task on every staging request. The Builder performs static analysis on the app code and performs any necessary pre-processing before the app is first run.
* **The Launcher**, which runs an app. The CC-Bridge sets the Launcher as the Action on the DesiredLRP for the app. The Launcher executes the start command with the correct system context, including working directory and environment variables.
* **The Healthcheck**, which performs a status check on running apps from inside the container. 

#### Current Implementations

* [Buildpack App Lifecycle](https://github.com/cloudfoundry-incubator/buildpack-app-lifecycle) implements the Cloud Foundry buildpack-based deployment strategy.
* [Docker App Lifecycle](https://github.com/cloudfoundry-incubator/docker-app-lifecycle) implements a Docker deployment strategy.
