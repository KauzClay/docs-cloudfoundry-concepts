  ---
  title: Understanding Application Security Groups
  owner: Security
  ---

  <% if vars.product_name == 'PWS' %>

  <% else %>

  <style>
  .note.warning {
  background-color: #fdd;
  border-color: #fbb
  }

  .note.warning:before {
  color: #f99;
  }
  </style>

  <strong><%= modified_date %></strong>

  _This page assumes you are using cf CLI v6.4 or later._

  ## <a id='introduction'></a>Introduction ##

  This topic provides an overview of Application Security Groups (ASGs), and describes how to manage and administer them. Many of the steps below require the [Cloud Foundry Command Line Interface](../cf-cli/install-go-cli.html) (cf CLI) tool. 
  <%= vars.asg_first_time %>

  ###<a id="defn"></a>Application Security Groups

  Application Security Groups (ASGs) are a collections of egress rules that
  specify the protocols, ports, and IP address ranges where app or task instances 
  send traffic.
  Because ASGs define **allow** rules, their order of evaluation is unimportant
  when multiple ASGs apply to the same space or deployment.
  The platform sets up rules to filter and log outbound network traffic from app and task instances.
  ASGs apply to both buildpack-based and Docker-based apps and tasks.

  When apps or tasks begin staging, they need traffic rules permissive enough to
  allow them to pull resources from the network.
  After an app or task is running, the traffic rules can be more restrictive and
  secure.
  To distinguish between these two security requirements, administrators can
  define one ASG for app and task staging, and another for app and task runtime.

  To provide granular control when securing a deployment, an administrator can
  assign ASGs to apply to all app and task instances for the entire deployment,
  or assign ASGs to spaces to apply only to apps and tasks in a particular space.

  ASGs can be complicated to configure correctly, especially when the specific IP
  addresses listed in a group change.
  To simplify securing a deployment while still permitting apps reach external
  services, operators can deploy the services into a subnet that is separate from
  their Cloud Foundry deployment.
  Then the operators can create ASGs for the apps that whitelist those service
  subnets, while denying access to any virtual machine (VM) hosting other apps.

  For examples of typical ASGs, see the <a href="#typical-groups">Typical Application Security Groups</a> section of this topic.

  ### <a id='default-asg'></a>Default ASGs ##

  <% if vars.product_name == 'CF' %>
  <%= partial 'default_asg_oss' %>
  <% else %>
  <%= partial '../opsguide/default_asg' %>
  <% end %>

  ### <a id="asg-sets"></a> ASG Sets

  ASGs are applied by configuring ASG sets differentiated by _scope_, platform-wide or space specific, and _lifecycle_, staging or running.

  Currently, four ASG sets exist in Cloud Foundry:

  + Platform-wide staging ASG set, also called "default-staging"
  + Platform-wide running ASG set, also called "default-running"
  + Space-scoped staging ASG set
  + Space-scoped running ASG set

  The following table indicates the differences between the four sets.

  <table>
  <tr>
  <th>When an ASG is bound to the... </th>
  <th>the ASG rules are applied to...</th>
  </tr>
  <tr>
  <td>Platform-wide staging ASG set</td>
  <td>the staging lifecycle for all apps and tasks.</td>
  </tr>
  <tr>
  <td>Platform-wide running ASG set</td>
  <td>the running lifecycle for all app and task instances.</td>
  </tr>
  <tr>
  <td>Space-scoped staging ASG set</td>
  <td>the staging lifecycle for apps and tasks in a particular space.</td>
  </tr>
  <tr>
  <td>Space-scoped running ASG set</td>
  <td>the running lifecycle for app and task instances in a particular space.</td>
  </tr>
  </table>

  Typically, ASGs applied during the staging lifecycle are more permissive than 
  the ASGs applied during the running lifecycle.
  This is because staging often requires access to different resources, such as
  dependencies.

  You use different commands to apply an ASG to each of the four sets. For more information, see the [Procedures](#procedures) section of this topic.

  <p class="note"><strong>Note</strong>: To apply a staging ASG to apps within a space, you must use the Cloud Controller (CC) API. The cf CLI <code>cf bind-security-group</code> command supports space-scoped running ASGs, but not space-scoped staging ASGs.</p>

  ### <a id='creating-groups'></a>The Structure and Attributes of ASGs ##

  ASG rules are specified as a JSON array of ASG objects. An ASG object has the following attributes:


  |Attribute        |Description                                                                                                                                                                                                  |Notes
  |---              |---                                                                                                                                                                                                          |---
  |`protocol`       |`tcp`, `udp`, `icmp`, or `all`                                                                                                                                                                               |Required 
  |`destination`    |A single IP address, an IP address range like `192.0.2.0-192.0.2.50`, or a CIDR block that can receive traffic
  |`ports`          |A single port, multiple comma-separated ports, or a single range of ports that can receive traffic. Examples: `443`, `80,8080,8081`, `8080-8081`                                                            |Required when `protocol` is `tcp` or `udp`
  |`code`           |ICMP code                                                                                                                                                                                                    |Required when `protocol` is `icmp`. A value of `-1` allows all codes.
  |`type`           |ICMP type                                                                                                                                                                                                    |Required when `protocol` is `icmp`. A value of `-1` allows all types.
  |`log`            |Set to `true` to enable logging. For more information about how to configure system logs to be sent to a syslog drain, see the <a href="../devguide/services/log-management.html">Using Log Management Services</a> topic.                                                                                                                                                                                                    |Logging is only supported with protocol type `tcp`
  | `description`   |An optional text field for operators managing security group rules



  ##<a id="process"></a> Process for Administering ASGs

  The following table outlines the flow of tasks that the administrator carries out over the lifecycle of ASGs.
  Procedures for each of these tasks are given in [Managing ASGs with the cf CLI](#procedures) below.

  <%= vars.asg_first_time %>

  <table>
  <tr>
  <th></th>
  <th>Task</th>
  <th>For more information, see</th>
  </tr>
  <tr>
  <td>1.</td>
  <td>Review the existing ASGs. If this is a new deployment, these like consist of only the <a href="#default">Default ASGs</a>.</td>
  <td><a href="#viewing">View ASGs</a></td>
  </tr>
  <tr>
  <td>2. </td>
  <td>Create new ASGs.</td>
  <td><a href="#asg-individual">Create ASGs</a></td>
  </tr>
  <tr>
  <td>3.</td>
  <td>Update the existing ASGs.</td>
  <td><a href="#updating-groups">Update ASGs</a></td>
  </tr>
  <tr>
  <td>4.</td>
  <td>Bind ASGs to an ASG set.</td>
  <td><a href="#binding-groups">Bind ASGs</a></td>
  </tr>
  <tr>
  <td>5.</td>
  <td>If you need to delete an ASG, first unbind it, then delete it.</td>
  <td><a href="#unbinding-asgs">Unbind ASGs</a><br>
  <a href="#deleting-groups">Delete ASGs</a></td>
  </tr>
  </table>

  ## <a id='procedures'></a> Managing ASGs with the cf CLI

  This section provides the commands you need to create and manage ASGs.

  ### <a id='viewing'></a>View ASGs

  Run the following cf CLI commands to view information about existing ASGs:

  |Command                             |Output
  |---                                 |---
  |`cf security-groups`                |All ASGs
  |`cf staging-security-groups`        |All ASGs applied to the platform-wide staging ASG set
  |`cf running-security-groups`        |All ASGs applied to the platform-wide running ASG set
  |`cf security-group SECURITY-GROUP`         |All rules in the ASG named `SECURITY-GROUP`, for example, <code>cf security-group dns</code>

  <%= vars.asg_note %>

  ###<a id='asg-individual'></a>Create ASGs

  To create an ASG, perform the following steps:

  1. Create a rules file: a JSON-formatted single array containing objects that describe the rules.
  See the following example, which allows ICMP traffic of code `1` and type `0` to all destinations,  and TCP traffic to `10.0.11.0/24` on ports `80` and `443`. Also see [The Structure and Attributes of ASGs](#creating-groups).

  <pre>
  [
  {
  "protocol": "icmp",
  "destination": "0.0.0.0/0",
  "type": 0,
  "code": 1
  },
  {
  "protocol": "tcp",
  "destination": "10.0.11.0/24",
  "ports": "80,443",
  "log": true,
  "description": "Allow http and https traffic from ZoneA"
  }
  ]
  </pre>

  1. Run `cf create-security-group SECURITY-GROUP PATH-TO-RULES-FILE`. Replace `SECURITY-GROUP` with the name of your security group, and `PATH-TO-RULES-FILE`
  with the absolute or relative path to a rules file.

  In the following example, `my-asg` is the name of a security group, and `~/workspace/my-asg.json` is the path to a rules file.

  <pre class="terminal">
  $ cf create-security-group my-asg ~/workspace/my-asg.json
  </pre>

  After the ASG is created, you must bind it to an ASG set before it takes effect.
  See <a href="#binding-groups">Bind ASGs</a> below.

  ### <a id='binding-groups'></a>Bind ASGs ##

  <p class='note'><strong>Note</strong>: Binding an ASG does not affect started apps until you restart them. To restart all of the apps in an org or a space, use the <a href="https://github.com/cloudfoundry-incubator/app-restarter">app-restarter</a> cf CLI plugin.</p>

  To apply an ASG, you must first bind it to an ASG set.

  To bind an ASG to the platform-wide staging ASG set, run `cf bind-staging-security-group SECURITY-GROUP`. Replace `SECURITY-GROUP` with the name of your security group.

  Example: 
  <pre class="terminal">
  $ cf bind-staging-security-group my-asg
  </pre>

  To bind an ASG to the platform-wide running ASG set, run `cf bind-running-security-group SECURITY-GROUP` command. Replace `SECURITY-GROUP` with the name of your security group.

  Example:
  <pre class="terminal">
  $ cf bind-running-security-group my-asg
  </pre>

  To bind an ASG to a space-scoped running ASG set, run `cf bind-security-group SECURITY-GROUP ORG SPACE`. Replace `SECURITY-GROUP` with the name of your security group. Replace `ORG` and `SPACE` with the org and space where you want to bind the ASG set.

  Example:
  <pre class="terminal">
  $ cf bind-security-group my-asg my-org my-space
  </pre>

  To bind an ASG to a space-scoped staging ASG set, run the following Cloud Controller (CC) API commands:
  <pre>
  GET /v2/security\_groups/:guid/staging\_spaces
  PUT /v2/spaces/:guid/staging\_security\_groups/:security\_group\_guid data
  PUT /v2/security\_groups/:guid/staging\_spaces/:space\_guid
  DELETE /v2/spaces/:guid/staging\_security\_groups/:security\_group\_guid  data
  DELETE /v2/security\_groups/:guid/staging\_spaces/:space\_guid
  </pre>
  These API calls require administrator access.
  Additionally, the payload returned from API `GET` calls to
  `/v2/spaces/` and `/v2/spaces/:guid` includes a link to the `staging_security_groups_url`.

  For more information about using these CC API commands, see the [Cloud Foundry API](https://apidocs.cloudfoundry.org/) documentation.

  ### <a id='updating-groups'></a>Update ASGs

  To update an existing ASG, perform the following steps.

  1. Edit the ASG rules in the JSON file.

  2. Run `cf update-security-group SECURITY-GROUP PATH-TO-RULES-FILE`. Replace `SECURITY-GROUP` with the name of the existing ASG you want to change, and `PATH-TO-RULES-FILE` with the absolute or relative path to a rules file.

  In the following example, `my-asg` is the name of a security group, and `~/workspace/my-asg-v2.json` is the path to a rules file.

  <pre class="terminal">
  $ cf update-security-group my-asg ~/workspace/my-asg-v2.json
  </pre>

  <p class='note'><strong>Note</strong>: Updating an ASG does not affect started apps until you restart them. To restart all of the apps in an org or a space,
  use the <a href="https://github.com/cloudfoundry-incubator/app-restarter">app-restarter</a> cf CLI plugin.</p>

  ### <a id='unbinding-groups'></a>Unbind ASGs

  <p class='note'><strong>Note</strong>: Unbinding an ASG does not affect started apps until you restart them. To restart all of the apps in an org or a space,
  use the <a href="https://github.com/cloudfoundry-incubator/app-restarter">app-restarter</a> cf CLI plugin.</p>

  To unbind an ASG from the platform-wide staging ASG set, run `cf unbind-staging-security-group SECURITY-GROUP`. Replace `SECURITY-GROUP` with the name of your security group.

  Example: 
  <pre class="terminal">
  $ cf unbind-staging-security-group my-asg
  </pre>

  To unbind an ASG from the platform-wide running ASG set, run `cf unbind-running-security-group SECURITY-GROUP`. Replace `SECURITY-GROUP` with the name of your security group.

  Example:
  <pre class="terminal">
  $ cf unbind-running-security-group my-asg
  </pre>

  To unbind an ASG from a specific space, run `cf unbind-security-group SECURITY-GROUP ORG SPACE`. Replace `SECURITY-GROUP` with the name of your security group. Replace `ORG` and `SPACE` with the org and space where you want to unbind the ASG set.

  Example:
  <pre class="terminal">
  $ cf unbind-security-group my-asg my-org my-space
  </pre>

  ### <a id='deleting-groups'></a>Delete ASGs ##

  <p class='note'><strong>Note</strong>: You can only delete unbound ASGs. To unbind ASGs, see <a href="#unbinding-groups">Unbind ASGs</a> above.</p>

  To delete an ASG, run `cf delete-security-group SECURITY-GROUP`. Replace `SECURITY-GROUP` with the name of your security group.

  Example: 
  <pre class="terminal">
  $ cf delete-security-group my-asg 
  </pre>

  ## <a id='typical-groups'></a>Typical ASGs ##

  Below are examples of typical ASGs. Configure your ASGs in accordance with your organization's network access policy for untrusted apps.

  |ASG                   |For access to
  |---                   |---
  |`dns`                 |DNS, either public or private
  |`public-networks`     |Public networks, excluding IaaS metadata endpoints
  |`private-networks`    |Private networks in accordance with  [RFC-1918](https://tools.ietf.org/html/rfc1918#section-3)
  |`load-balancers`      |The internal <%= vars.product_full %> load balancer and others
  |`internal-proxies`    |Internal proxies
  |`internal-databases`  |Internal databases

  ### <a id='dns-example'></a>DNS ###

  To resolve hostnames to IP addresses, apps require DNS server connectivity, 
  which typically use port 53. 
  Administrators should create or update a `dns` ASG with appropriate rules. Administrators may further restrict the DNS servers to specific IP addresses or 
  ranges of IP addresses.

  Example `dns` ASG:

  ```
  [
  {
  "protocol": "tcp",
  "destination": "0.0.0.0/0",
  "ports": "53"
  },
  {
  "protocol": "udp",
  "destination": "0.0.0.0/0",
  "ports": "53"
  }
  ]
  ```

  ### <a id='public-networks-example'></a>Public Networks ###

  Apps often require public network connectivity to retrieve app dependencies, or 
  to integrate with services available on public networks. 
  Example app dependencies include public Maven repositories, NPM, RubyGems, and 
  Docker registries.

  <p class='note'><strong>Note</strong>: You should exclude IaaS metadata endpoints, such as <code>169.254.169.254</code>, because the metadata endpoint can expose sensitive environment information to untrusted apps. The <code>public_networks</code> example below accounts for this recommendation.</p>

  Example `public_networks` ASG:

  ```
  [
  {
  "destination": "0.0.0.0-9.255.255.255",
  "protocol": "all"
  },
  {
  "destination": "11.0.0.0-169.253.255.255",
  "protocol": "all"
  },
  {
  "destination": "169.255.0.0-172.15.255.255",
  "protocol": "all"
  },
  {
  "destination": "172.32.0.0-192.167.255.255",
  "protocol": "all"
  },
  {
  "destination": "192.169.0.0-255.255.255.255",
  "protocol": "all"
  }
  ]
  ```

  ### <a id='private-networks-example'></a>Private Networks ###

  Network connections that are commonly allowable in private networks include
  endpoints such as proxy servers, Docker registries, load balancers, databases,
  messaging servers, directory servers, and file servers. Configure appropriate
  private network ASGs as appropriate. You may find it helpful to use a naming
  convention with `private_networks` as part of the ASG name, such as `private_networks_databases`.

  <p class='note'><strong>Note</strong>: You should exclude any private networks and IP addresses that app and task instances should not have access to. </p>

  Example `private_networks` ASG:

  ```
  [
  {
  "protocol": "tcp",
  "destination": "10.0.0.0-10.255.255.255",
  "ports": "443"
  },
  {
  "protocol": "tcp",
  "destination": "172.16.0.0-172.31.255.255",
  "ports": "443"
  },
  {
  "protocol": "tcp",
  "destination": "192.168.0.0-192.168.255.255",
  "ports": "443"
  }
  ]
  ```

  ### <a id='marketplace-services'></a>Marketplace Services ###

  Each installed Marketplace Service requires its own set of ASG rules to
  function properly. See the installation instructions for each
  installed Marketplace Service to determine which ASG rules it requires.
  For more information about how to provision and integrate services, see the [Services Overview](../devguide/services/index.html) topics.

  ##<a id='asg-baseline'></a> About the ASG Creator Tool

  The ASG Creator is a command line tool that you can use to create JSON rules
  files.
  The ASG Creator lets you specify IP addresses, CIDRs, and IP address ranges
  that you want to disallow traffic to, as well as the addresses that you want to allow traffic to.
  Based on these disallow/allow (exclude/include) lists that you provide as
  input, the ASG Creator formulates a JSON file of allow rules.

  In turn, the JSON file is the input for the `cf bind-security-group ` command
  that creates an ASG.

  You can download the latest release of the ASG Creator from the Cloud Foundry incubator repository on Github:  [https://github.com/cloudfoundry-incubator/asg-creator/releases/latest](https://github.com/cloudfoundry-incubator/asg-creator/releases/latest)

  ##<a id='logging'></a> ASG Logging

As an operator, correlating the emitted logs back to an application can aid in troubleshooting and debugging. In addition, correlating logs is helpful for auditing and detecting possible malicious activity. The generated logs provide granular information including the org, space, source, and destination addresses. 

 ###<a id="asg-logging-prereq"></a> Configuring your Rules File

In order to trace logs, the `log` attribute must be set to `true` in your rules file, a JSON-formatted file containing a single array of objects that describes the rules for your Application Security Groups.

For more information on configuring the rules file and creating Application Security Groups, see the “Create ASGs” section of the [Understanding Application Security Groups](https://docs.pivotal.io/pivotalcf/concepts/asg.html#asg-individual) topic. 

Below is a code sample from an example rules file. In this example, the rules file is configured to forward requests to 10.87.35.105 via the syslog server. 

  <pre class="terminal">
  [ 
  { 
  "protocol": "tcp", 
  "destination": "10.87.35.105", 
  "ports":"80",   
  "log": true, 
  "description": "Allow apps to reach gorouter" 
  } 
  ]
 </pre>

###<a id="single-ip"></a> Obtain Traffic Logs from a Single IP

To obtain a log entry, utilize the `grep` command and specify the IP address that you want to audit:

`$ grep “DST= IP_ADDRESS”`

As an example, we will be using 10.193.79.30 as the IP address. 

<pre class="terminal">
$ grep “DST= 10.193.79.30”

10.193.79.42.log:Jun 20 23:05:03 10.193.79.42 kern kernel [job=diego_cell index=2] [1122561.945562] <b>d08bb414-cdba-4381-412a-e9eccIN</b>=wbrdg-0afe0008 OUT=eth0 MAC=4e:b7:a4:74:e2:45:0a:5a:66:81:1f:1d:08:00 SRC=10.254.0.10 DST=10.193.79.30 LEN=60 TOS=0x00 PREC=0x00 TTL=63 ID=60879 DF PROTO=TCP SPT=42630 DPT=80 WINDOW=28280 RES=0x00 SYN URGP=0
</pre>

In the above terminal output the <b>container_id</b> is bolded above. The <b>container_id</b> is a 31 character unique ID that allows operators to trace back to the app. The <b>containder_id</b>, as evidenced above, precedes “IN” in log entries. Operators can query the <b>container_id</b> to obtain the <b>process_guid</b>. 

To obtain the <b>process_guid</b> run the `grep` command in conjunction with the <b>container_id</b> in the following way:

`grep CONTAINER_ID | “vcap.rep” | grep process_guid`

As an example, we will use the the container_id from the prior example. 

<pre class="terminal">
grep d08bb414-cdba-4381-412a-e9ecc 10.193.79.42.log| grep "vcap.rep" | grep process_guid
</pre>

After running the `grep` command with the <b>container_id</b>, the resulting terminal output will contain the <b>process_guid</b>. 

<pre class= "terminal">
Jun 22 13:07:52 10.193.79.42 user vcap.rep [job=diego_cell index=2]  {"timestamp":"1498136872.889604807",
"source":"rep","message":"rep.executing-container-operation.ordinary-lrp-processor.process-reserved-
container.run-container.containerstore-run.node-run.action.run-step.process-exit","log_level":1,
"data":{"cancelled":true,"container-guid":"d08bb414-cdba-4381-412a-e9eccdcedb40","container-state":
"reserved","exitStatus":143,"guid":"d08bb414-cdba-4381-412a-e9eccdcedb40","lrp-instance-key"
:{"instance_guid":"d08bb414-cdba-4381-412a-e9eccdcedb40","cell_id":"diego_cell-2"},"lrp-key"
:{<b>"process_guid":"4ccbb24c-268e-421a-9d1b-3678b6eb40d0</b>-4a2fe5af-5d55-4c0e-b720-5e2a8ee686a3","
index":0,"domain":"cf-apps"},"process":"56c9d
</pre>

The <b>process_guid</b> string in the resulting output is comprised of 73 characters, inclusive of dashes. The operator only needs the first 36 characters of that string in combination with the `cf curl` command to query for the app <b>name</b> and <b>space_url</b>. 

`$ cf curl /v2/apps/PROCESS_GUID`

As an example, we will use the the process_guid from the prior example. 

<pre class= "terminal">
$ cf curl /v2/apps/4ccbb24c-268e-421a-9d1b-3678b6eb40d0

{
 "metadata": 
 "guid": "4ccbb24c-268e-421a-9d1b-3678b6eb40d0",      
"url": "/v2/apps/4ccbb24c-268e-421a-9d1b-3678b6eb40d0",
      "created_at": "2017-06-16T23:13:55Z",
      "updated_at": "2017-06-20T22:56:40Z"
   },
   "entity": {
      "<b>name": "proxy"</b>,
      "production": false,
      "space_guid": "c65add41-d85b-4823-9e2a-545a5e0e5812",
      "stack_guid": "9dad41b8-3043-48da-acf4-e1d4a700ea88",
      "
      "ports": [
         8080
--- snip ---

      ],
      "<b>space_url": "/v2/spaces/c65add41-d85b-4823-9e2a-545a5e0e5812</b>",
      "stack_url": "/v2/stacks/9dad41b8-3043-48da-acf4-e1d4a700ea88",
      "routes_url": "/v2/apps/4ccbb24c-268e-421a-9d1b-3678b6eb40d0/routes",
      "events_url": "/v2/apps/4ccbb24c-268e-421a-9d1b-3678b6eb40d0/events",
      "service_bindings_url": "/v2/apps/4ccbb24c-268e-421a-9d1b-3678b6eb40d0/service_bindings",
      "route_mappings_url": "/v2/apps/4ccbb24c-268e-421a-9d1b-3678b6eb40d0/route_mappings"
   } 

</pre>

To obtain the space <b>name</b> and <b>organization_url</b>, use the `cf curl` command in conjunction with the <b>space_url</b> in the following way.
`$ cf curl /v2/spaces/SPACE_URL`

As an example, we will use the the space_url from the prior example. 

<pre class= "terminal">
$ cf curl /v2/spaces/c65add41-d85b-4823-9e2a-545a5e0e5812

{
   "metadata": {
      "guid": "c65add41-d85b-4823-9e2a-545a5e0e5812",
      "url": "/v2/spaces/c65add41-d85b-4823-9e2a-545a5e0e5812",
      "created_at": "2017-06-16T18:14:40Z",
      "updated_at": null
   },
   "entity": {
      "<b>name": "s"</b>,
      "organization_guid": "2c279d6c-6f15-4cc0-99ed-72ef76ec50eb",
      "space_quota_definition_guid": null,
      "allow_ssh": true,
      "<b>organization_url": "/v2/organizations/2c279d6c-6f15-4cc0-99ed-72ef76ec50eb"</b>,
      "developers_url": "/v2/spaces/c65add41-d85b-4823-9e2a-545a5e0e5812/developers",
      "managers_url": "/v2/spaces/c65add41-d85b-4823-9e2a-545a5e0e5812/managers",
      "auditors_url": "/v2/spaces/c65add41-d85b-4823-9e2a-545a5e0e5812/auditors",
      "apps_url": "/v2/spaces/c65add41-d85b-4823-9e2a-545a5e0e5812/apps",
      "routes_url": "/v2/spaces/c65add41-d85b-4823-9e2a-545a5e0e5812/routes",
      "domains_url": "/v2/spaces/c65add41-d85b-4823-9e2a-545a5e0e5812/domains",
      "service_instances_url": "/v2/spaces/c65add41-d85b-4823-9e2a-545a5e0e5812/service_instances",
      "app_events_url": "/v2/spaces/c65add41-d85b-4823-9e2a-545a5e0e5812/app_events",
      "events_url": "/v2/spaces/c65add41-d85b-4823-9e2a-545a5e0e5812/events",
      "security_groups_url": "/v2/spaces/c65add41-d85b-4823-9e2a-545a5e0e5812/security_groups" 
</pre>

To obtain the organization <b>name</b> use the `cf curl` command in conjunction with the <b>organization_url</b> in the following way:

`$ cf curl /v2/organizations/ORGANIZATION_URL`

As an example, we will use the the organizational_url from the prior example. 

<pre class= "terminal">
$ cf curl /v2/organizations/2c279d6c-6f15-4cc0-99ed-72ef76ec50eb 

{
   "metadata": {
      "guid": "2c279d6c-6f15-4cc0-99ed-72ef76ec50eb",
      "url": "/v2/organizations/2c279d6c-6f15-4cc0-99ed-72ef76ec50eb",
      "created_at": "2017-06-16T18:14:19Z",
      "updated_at": null
   },
   "entity": {
      "<b>name": "o"</b>,
      "billing_enabled": false,
      "quota_definition_guid": "6002a805-f285-4e7b-8ff6-cd4ac607d26e",
      "status": "active",
      "quota_definition_url": "/v2/quota_definitions/6002a805-f285-4e7b-8ff6-cd4ac607d26e",
      "spaces_url": "/v2/organizations/2c279d6c-6f15-4cc0-99ed-72ef76ec50eb/spaces",
      "domains_url": "/v2/organizations/2c279d6c-6f15-4cc0-99ed-72ef76ec50eb/domains",
      "private_domains_url": "/v2/organizations/2c279d6c-6f15-4cc0-99ed-72ef76ec50eb/private_domains",
      "users_url": "/v2/organizations/2c279d6c-6f15-4cc0-99ed-72ef76ec50eb/users",
      "managers_url": "/v2/organizations/2c279d6c-6f15-4cc0-99ed-72ef76ec50eb/managers",
      "billing_managers_url": "/v2/organizations/2c279d6c-6f15-4cc0-99ed-72ef76ec50eb/billing_managers",
      "auditors_url": "/v2/organizations/2c279d6c-6f15-4cc0-99ed-72ef76ec50eb/auditors",
      "app_events_url": "/v2/organizations/2c279d6c-6f15-4cc0-99ed-72ef76ec50eb/app_events",
      "space_quota_definitions_url": "/v2/organizations/2c279d6c-6f15-4cc0-99ed-72ef76ec50eb/space_quota_definitions"
   }
}
</pre>

 ###<a id="auditing-deleted-apps"></a> Auditing Deleted Apps

If an app has been deleted, `cf curl /v2/apps/PROCESS_GUID` will yield the following terminal output:

  <pre class="terminal">
  {
  "description": "The app could not be found: 4ccbb24c-268e-421a-9d1b-3678b6eb40d0", 
  "error_code": "CF-AppNotFound", 
  "code": 100004 
  }
  </pre>

To obtain historical information from an app that has since been deleted, call the events endpoint in conjunction with the <b>process_guid</b>. The events record catalogues events that happened in the past and as such cannot give operators insight into the current status of their application. These events are also eventually removed from the system. 

To call the events record run the cf curl command in the following way: 
`$ cf curl /v2/events?q=actee:CONTAINER_ID`. 

The resulting terminal output will contain the space_guid, organization_guid, and other relevant information. As an example, we will use the the container_id from a prior example: 

<pre class= "terminal">
 $ cf curl /v2/events?q=actee:4ccbb24c-268e-421a-9d1b-3678b6eb40d0
 {
  "total_results": 6,
  "total_pages": 1,
  "prev_url": null,
  "next_url": null,
  "resources": [
 {
  "metadata": {
  "guid": "d343a7dc-8882-4529-b3b9-83677ee2017e",
  "url": "/v2/events/d343a7dc-8882-4529-b3b9-83677ee2017e",
  "created_at": "2017-06-16T23:13:55Z",
  "updated_at": null
  },
  "entity": {
  "type": "audit.app.create",
  "actor": "7b2d6421-db00-4a1d-86d3-dc07edbe8afd",
  "actor_type": "user",
  "actor_name": "admin",
  "actee": "4ccbb24c-268e-421a-9d1b-3678b6eb40d0",
  "actee_type": "app",
  "actee_name": "proxy",
  "timestamp": "2017-06-16T23:13:55Z",
  "metadata": {
   "request": {
      "name": "proxy",
      "space_guid": "c65add41-d85b-4823-9e2a-545a5e0e5812",
      "memory": 32,
      "disk_quota": 32,
      "buildpack": "go_buildpack",
      "environment_json": "PRIVATE DATA HIDDEN",
      "console": false,
      "docker_credentials_json": "PRIVATE DATA HIDDEN",
      "health_check_type": "port",
      "instances": 1,
      "production": false,
      "state": "STOPPED"
   }
  },
  "space_guid": "c65add41-d85b-4823-9e2a-545a5e0e5812",
  "organization_guid": "2c279d6c-6f15-4cc0-99ed-72ef76ec50eb"
  }
  --snip--
</pre>

###<a id="cidr"></a> Obtaining Traffic Logs from a CIDR Range

In order to trace logs from a CIDR Range, the `destination` attribute in the rules file must be defined as a range of addresses, for example:

  <pre class="terminal">
  [ 
  { 
  "protocol": "tcp", 
  "destination": "0.0.0.0-0.0.0.255", 
  "ports":"80",   
  "log": true, 
  "description": "Allow apps to reach gorouter" 
  } 
  ]
 </pre>

<p class="note"><strong>Note</strong>: For this procedure to work, it is necessary to have aggregated logging for Syslog messages to a Syslog server. For more information, see [Enabling System Log Forwarding](https://docs.pivotal.io/pivotalcf/1-10/opsguide/logging-config-opsman.html#syslog-forward) section of the Configuring System Logging in Elastic Runtime topic. 
</p>

The method of obtaining the app name, organization space, organization url, organization name,  container_id, and process_guid are the same as outlined in the [Obtain Traffic Logs from a Single IP]() section of this page. 
